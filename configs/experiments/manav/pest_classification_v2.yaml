# @package _global_

# to execute this experiment run:
# python run.py experiment=default.yaml

# output path from experiment outputs
hydra:
  run:
    dir: /output/experiments/${hydra.job.config_name}_${now:%m-%d_%H-%M}

seed: 12345

trainer:
  _target_: pytorch_lightning.Trainer
  gpus: 0
  min_epochs: 1
  max_epochs: 100

model:
  _target_: src.models.base.Model
  network:
    _target_: src.networks.classification.ClassificationImageNet
    backbone:
      _target_: torchvision.models.mobilenet_v3_small
      pretrained: True
    num_classes: 2
  optimizer:
    _target_: torch.optim.SGD
    lr: 0.01
    momentum: 0.9
  loss:
    _target_: torch.nn.CrossEntropyLoss
  metrics:
    metric_list:
    - _target_: torchmetrics.Accuracy
    - _target_: torchmetrics.Precision
    - _target_: torchmetrics.Recall
    - _target_: torchmetrics.AUROC
      num_classes: 2

datamodule:
  _target_: src.data.base_datamodule.BaseDataModule
  num_workers: 10
  batch_size: 32
  shuffle: True
  drop_last: True
  pin_memory: True
  collate_fn: null # <
  dataset:
    _target_: src.data.trap_dataset.TrapValidationDataset
    IMG_DIR: "/scratchh/home/anmol/cotton-data/splits/gold/images/"
    SPLIT_DIR: "/scratchh/home/anmol/cotton-data/splits/gold/split_v2/"
    VAL_FILE: "/scratchh/home/anmol/cotton-data/splits/gold/split_v2/img_val_file.csv"
    label_map:
      trap: 0
      non_trap: 1
    transforms:
      train:
        - _target_: src.data.transforms.Resize
          width: 224
          height: 224
        - _target_: src.data.transforms.ToTensor
        - _target_: src.data.transforms.Normalize
      val:
        - _target_: src.data.transforms.Resize
          width: 224
          height: 224
        - _target_: src.data.transforms.ToTensor
        - _target_: src.data.transforms.Normalize
      test:
        - _target_: src.data.transforms.Resize
          width: 224
          height: 224
        - _target_: src.data.transforms.ToTensor
        - _target_: src.data.transforms.Normalize

callbacks:
  model_checkpoint:
    _target_: pytorch_lightning.callbacks.ModelCheckpoint
    monitor: "train/loss"
    mode: "max"
    dirpath: "checkpoints/"
    filename: "sample-ssd-pest-{epoch:02d}"

logger:
  wandb:
    _target_: pytorch_lightning.loggers.wandb.WandbLogger
    project: "pest-monitoring-new"
    notes: "Binary Classification (Traps / Non-Traps)"
    save_dir: "/output/"
