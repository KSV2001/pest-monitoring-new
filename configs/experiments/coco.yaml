# @package _global_

# to execute this experiment run:
# python run.py experiment=default.yaml

seed: 12345

hydra:
  run:
    dir: /output/${hydra.job.config_name}_${now:%m-%d_%H-%M}

trainer:
  _target_: pytorch_lightning.Trainer
  gpus: 0
  min_epochs: 1
  max_epochs: 10
  gradient_clip_val: 0.5
  accumulate_grad_batches: 2
  weights_summary: null

model:
  _target_: src.models.base.Model
  network:
    _target_: src.networks.detectron2network.Detectron2Network
    config_path: "COCO-Detection/retinanet_R_50_FPN_1x"
    trained: true
  optimizer:
    _target_: torch.optim.SGD
    lr: 0.01
    momentum: 0.9
  loss:
    _target_: torch.nn.CrossEntropyLoss
  metrics:
    - _target_: torchmetrics.Accuracy
    - _target_: torchmetrics.Precision
      num_classes: 3

datamodule:
  _target_: src.data.COCO.DataModule.COCODetectionDataModule
  num_workers: 16
  batch_size: 32
  shuffle: True
  drop_last: True
  pin_memory: True
  dataset:
    _target_: src.data.COCO.dataset.COCODataset
    root: "/data/coco2014/raw/"

callbacks:
  model_checkpoint:
    _target_: pytorch_lightning.callbacks.ModelCheckpoint
    monitor: None
    mode: "max"
    dirpath: "checkpoints/"
    filename: "sample-mnist-{epoch:02d}"

logger:
  wandb:
    _target_: pytorch_lightning.loggers.wandb.WandbLogger
    project: "pest-monitoring-new"
    notes: "Description of this model."
    save_dir: "/output/"